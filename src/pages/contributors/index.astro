---
import { CollectionEntry,getCollection,getEntryBySlug } from "astro:content";
import ContentSection from "../../components/display/ContentSection.astro";
import ContentTitle from "../../components/display/ContentTitle.astro";
import ContributorPreview from "../../components/display/ContributorPreview.astro";
import MosaicSection from "../../components/layouts/MosaicSection.astro";
import Tagline from "../../components/layouts/Tagline.astro";
import TaglineIcon from "../../components/layouts/TaglineIcon.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  return {
    params: { path: "" },
  };
}

const pageTitle = "Contributors";

// Fetch all founders, sorted by name desc
const founders: CollectionEntry<"contributors">[] = (
  await getCollection("contributors", ({ data }) => {
    return data.draft !== true && data.isFounder === true;
  })
).sort((a, b) =>
  (a?.data.name || "").localeCompare(b?.data.name || "")
) as CollectionEntry<"contributors">[];

// Select all non-draft events
const events = await getCollection("events", ({ data }) => data.draft !== true);

// Unique list of speakers by slug
const allSpeakersBySlug = [
  ...new Set(events.map((event) => event.data.speakers || []).flat()),
];

// Unique list of mentors by slug
const allMentorsBySlug = [
  ...new Set(events.map((event) => event.data.mentors || []).flat()),
];

// Unique list of designers
const allDesignersBySlug = ["federica-cutrera"];

// Fetch all speakers info from Contributors collection, ordered by name desc
const speakers: CollectionEntry<"contributors">[] = (
  await Promise.all(
    allSpeakersBySlug.map(
      async (speaker) => await getEntryBySlug("contributors", speaker)
    )
  )
)
  .filter((speaker) => speaker !== undefined && speaker.data.draft !== true)
  .sort((a, b) =>
    (a?.data.name || "").localeCompare(b?.data.name || "")
  ) as CollectionEntry<"contributors">[];

// Fetch all mentors info from Contributors collection, ordered by name desc
const mentors: CollectionEntry<"contributors">[] = (
  await Promise.all(
    allMentorsBySlug.map(
      async (mentor) => await getEntryBySlug("contributors", mentor)
    )
  )
)
  .filter((mentor) => mentor !== undefined && mentor.data.draft !== true)
  .sort((a, b) =>
    (a?.data.name || "").localeCompare(b?.data.name || "")
  ) as CollectionEntry<"contributors">[];

// Fetch all design contributors info from Contributors collection, ordered by name desc
const designers: CollectionEntry<"contributors">[] = (
  await Promise.all(
    allDesignersBySlug.map(
      async (designer) => await getEntryBySlug("contributors", designer)
    )
  )
)
  .filter((designer) => designer !== undefined && designer.data.draft !== true)
  .sort((a, b) =>
    (a?.data.name || "").localeCompare(b?.data.name || "")
  ) as CollectionEntry<"contributors">[];
---

<BaseLayout
  pageTitle={pageTitle}
  seo={{
    title: `Contributori del Beer Tech Group`,
    description: `Chi ha contributito alla creazione del Beer Tech Group e lo porta attivamente avanti`,
    tags: [
      "beer",
      "tech",
      "group",
      "contributors",
      "speakers",
      ...founders.map((f) => f.data.name),
    ],
    type: "website",
    image: "/images/logo_yellow.png",
    imageAlt: "Contributors image",
    og: {
      title: `Le persone che contribuiscono al Beer Tech Group`,
    },
    twitter: {
      card: "summary",
    },
  }}
>
  <Tagline slot="after-header">
    <TaglineIcon icon="partner_exchange" slot="icon" />
    <div class="mb-10">
      <h2>Contributors</h2>
      <h4>Le persone che contribuiscono al Beer Tech Group</h4>
    </div>
  </Tagline>

  <!-- Founders -->
  {
    founders.length > 0 && (
      <ContentSection>
        <ContentTitle>Founders</ContentTitle>
        <MosaicSection>
          {founders.map((founder) => (
            <ContributorPreview refId="founders" person={founder} />
          ))}
        </MosaicSection>
      </ContentSection>
    )
  }

  <!-- Designers -->
  {
    designers.length > 0 && (
      <ContentSection>
        <ContentTitle>Logo, UI & Design</ContentTitle>
        <MosaicSection>
          {designers.map((designer) => (
            <ContributorPreview refId="speakers" person={designer} />
          ))}
        </MosaicSection>
      </ContentSection>
    )
  }

  <!-- Speakers -->
  {
    speakers.length > 0 && (
      <ContentSection>
        <ContentTitle>All speakers</ContentTitle>
        <MosaicSection>
          {speakers.map((speaker) => (
            <ContributorPreview refId="speakers" person={speaker} />
          ))}
        </MosaicSection>
      </ContentSection>
    )
  }

  <!-- Mentors -->
  {
    mentors.length > 0 && (
      <ContentSection>
        <ContentTitle>All mentors</ContentTitle>
        <MosaicSection>
          {mentors.map((mentor) => (
            <ContributorPreview refId="mentors" person={mentor} />
          ))}
        </MosaicSection>
      </ContentSection>
    )
  }
</BaseLayout>
