---
import Chip from "@components/display/Chip.astro";
import ButtonLink from "@components/input/ButtonLink.astro";
import Tagline from "@components/layouts/Tagline.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { CollectionEntry, getCollection, getEntryBySlug } from "astro:content";
import moment from "moment";
import "moment/locale/it";
import ContentSection from "../../components/display/ContentSection.astro";
import ContentTitle from "../../components/display/ContentTitle.astro";
import ContributorPreview from "../../components/display/ContributorPreview.astro";
import InfoIcon from "../../components/display/InfoIcon.astro";
import SponsorPreview from "../../components/display/SponsorPreview.astro";
import MosaicSection from "../../components/layouts/MosaicSection.astro";
import TaglineIcon from "../../components/layouts/TaglineIcon.astro";
import SpeechCounter from "../../components/ui/events/SpeechCounter.astro";
import SpeechRecap from "../../components/ui/events/SpeechRecap.astro";
moment.locale("it");

import "./Event.scss";

export async function getStaticPaths() {
  const events = await getCollection("events");
  return await Promise.all(
    events.map(async (entry: CollectionEntry<"events">) => {
      const speakers = (
        await Promise.all(
          entry.data.speakers?.map(async (speaker: string) =>
            getEntryBySlug("contributors", speaker)
          ) || []
        )
      ).filter((entry) => entry !== undefined);

      const mentors = (
        await Promise.all(
          entry.data.mentors?.map(async (mentor: string) =>
            getEntryBySlug("contributors", mentor)
          ) || []
        )
      ).filter((entry) => entry !== undefined);

      const sponsors = (
        await Promise.all(
          entry.data.sponsors?.map(async (sponsor: string) =>
            getEntryBySlug("sponsors", sponsor)
          ) || []
        )
      ).filter((entry) => entry !== undefined);

      return {
        params: { slug: entry.slug },
        props: { event: entry, speakers, mentors, sponsors },
      };
    })
  );
}

type Props = {
  event: CollectionEntry<"events">;
  speakers: CollectionEntry<"contributors">[];
  mentors: CollectionEntry<"contributors">[];
  sponsors: CollectionEntry<"sponsors">[];
};

const { event, speakers, mentors, sponsors } = Astro.props;
const { data } = event;
const { Content } = await event.render();

const bookingOver = moment(data.date).isBefore(moment().endOf("d"));
---

<BaseLayout
  pageTitle={data.title}
  seo={{
    title: data.seo.title ?? data.title,
    description: data.seo.description,
    tags: data.seo.keywords,
    type: "event",
    image: "/images/logo_yellow.png",
    imageAlt: data.seo.title ?? data.title,
    og: {
      title: `${data.seo.title ?? data.title} - ${moment(data.date).format(
        "dddd DD MMMM YYYY"
      )}`,
    },
    twitter: {
      card: "summary",
    },
  }}
>
  <Tagline slot="after-header">
    <TaglineIcon icon="sports_bar" slot="icon" />
    <div class="mb-10">
      <h2 class="event-title">{data.title}</h2>
      <h3 class="event-date">
        {moment(data.date).format("dddd DD MMMM YYYY, HH:mm")}
      </h3>
      <p class="event-address">
        {data.location.address} @
        {
          data.location.link ? (
            <a href={data.location.link} target="_blank">
              {data.location.name}
            </a>
          ) : (
            data.location.name
          )
        }
      </p>
    </div>

    <section class="mt-10 flex flex-row flex-wrap">
      <Chip className="mr-2">{data.mode}</Chip>
      <Chip>{data.type}</Chip>
    </section>

    <section class="mt-10 flex flex-row flex-wrap">
      {
        data.tags.map((tag) => (
          <Chip variant="contained" className="mr-2 mb-2">
            {tag}
          </Chip>
        ))
      }
    </section>
  </Tagline>

  <ContentSection
    className="flex flex-wrap  flex-row justify-evenly items-center"
  >
    {
      data.participants && (
        <SpeechCounter
          icon="groups"
          title="Partecipanti"
          counter={data.participants}
        />
      )
    }
    {
      speakers.length > 0 && (
        <SpeechCounter
          icon="record_voice_over"
          title="Speakers"
          counter={speakers.length}
        />
      )
    }

    {
      mentors.length > 0 && (
        <SpeechCounter
          icon="local_police"
          title="Mentors"
          counter={mentors.length}
        />
      )
    }
    {
      sponsors.length > 0 && (
        <SpeechCounter
          icon="rocket_launch"
          title="Sponsors"
          counter={sponsors.length}
        />
      )
    }
  </ContentSection>

  <ContentSection className="text-center">
    {
      data.invitationLink && !bookingOver && (
        <ButtonLink
          link={data.invitationLink}
          color="secondary"
          variant="contained"
          external
        >
          Partecipa
        </ButtonLink>
      )
    }
    {bookingOver && <strong>Registrazioni concluse</strong>}
  </ContentSection>

  <ContentSection>
    <div class="divide-x-2">
      <hr />
    </div>
  </ContentSection>

  <ContentSection>
    <Content />
  </ContentSection>

  <!-- Speakers -->
  {
    speakers.length > 0 ? (
      <ContentSection>
        <ContentTitle>Speakers</ContentTitle>
        <MosaicSection>
          {speakers.map((speaker) => (
            <>
              <ContributorPreview refId="speakers" person={speaker} />
            </>
          ))}
        </MosaicSection>
      </ContentSection>
    ) : null
  }

  <!-- Mentors -->
  {
    mentors.length > 0 ? (
      <ContentSection>
        <ContentTitle>Mentors</ContentTitle>
        <MosaicSection>
          {mentors.map((mentor) => (
            <ContributorPreview refId="mentors" person={mentor} />
          ))}
        </MosaicSection>
      </ContentSection>
    ) : null
  }

  <!-- Sponsors -->
  {
    sponsors.length > 0 ? (
      <ContentSection>
        <ContentTitle>Sponsors</ContentTitle>
        <MosaicSection>
          {sponsors.map((sponsor) => (
            <SponsorPreview sponsor={sponsor} />
          ))}
        </MosaicSection>
      </ContentSection>
    ) : null
  }

  <ContentSection>
    <div class="divide-x-2">
      <hr />
    </div>
  </ContentSection>

  <ContentSection>
    <ContentTitle>Come partecipare?</ContentTitle>
    <section
      class="my-10 flex flex-col flex-wrap items-center justify-center sm:flex-row sm:items-start sm:justify-between"
    >
      <InfoIcon icon="book_online">
        <a href={data.invitationLink}>Prenotati</a> online
      </InfoIcon>
      <InfoIcon icon="move">Vieni al locale</InfoIcon>
      <InfoIcon icon="qr_code_scanner">Registra la tua presenza</InfoIcon>
      <InfoIcon icon="sports_bar">
        Assisti all'evento e gusta la tua birra
      </InfoIcon>
    </section>
  </ContentSection>

  <ContentSection>
    <div class="divide-x-2">
      <hr />
    </div>
  </ContentSection>

  <ContentSection>
    <section
      class="flex flex-col flex-wrap items-center justify-center sm:flex-row sm:items-start sm:justify-evenly"
    >
      <SpeechRecap icon="schedule" title="Quando">
        <p class="first-letter:uppercase">
          {moment(data.date).format("dddd DD MMMM YYYY, HH:mm")}
        </p>
      </SpeechRecap>
      <SpeechRecap icon="location_on" title="Dove">
        <p>
          {
            data.location.link ? (
              <a href={data.location.link} target="_blank">
                {data.location.name}
              </a>
            ) : (
              data.location.name
            )
          }
        </p>
        <p>
          {data.location.address}
        </p>
      </SpeechRecap>
    </section>
  </ContentSection>

  <ContentSection className="my-24 text-center">
    {
      data.invitationLink && !bookingOver && (
        <ButtonLink
          link={data.invitationLink}
          className="mb-2 md:mb-0"
          color="secondary"
          variant="contained"
          external
        >
          Partecipa
        </ButtonLink>
      )
    }
    <ButtonLink link="/events/" className="ml-5">Tutti gli eventi</ButtonLink>
  </ContentSection>
</BaseLayout>
